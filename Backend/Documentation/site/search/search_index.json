{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"______ __ __ __ ______ ______ ______ ______ __ __ /\\ ___\\/\\ \\/\\ \"-.\\ \\/\\__ _\\/\\ == \\/\\ __ \\/\\ ___\\/\\ \\/ / \\ \\ __\\\\ \\ \\ \\ \\-. \\/_/\\ \\/\\ \\ __<\\ \\ __ \\ \\ \\___\\ \\ _\"-. \\ \\_\\ \\ \\_\\ \\_\\\\\"\\_\\ \\ \\_\\ \\ \\_\\ \\_\\ \\_\\ \\_\\ \\_____\\ \\_\\ \\_\\ \\/_/ \\/_/\\/_/ \\/_/ \\/_/ \\/_/ /_/\\/_/\\/_/\\/_____/\\/_/\\/_/ \ud83d\ude80 Backend Documentation \u00b6 This documentation outlines the backend structure, API endpoints, project layout, and the process for updating and deploying the documentation. The backend is built with Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL for persistent storage. \ud83d\udcda Table of Contents \u00b6 \ud83c\udf10 API \ud83d\udd10 Authentication \ud83d\udcd8 Account Management \ud83d\udce6 Category Management \ud83d\udcb8 Transaction Management \ud83d\udcee Postman API Testing \u26a1 Quick Start \ud83d\uddc4\ufe0f Database Schema \ud83d\uddc2\ufe0f Project Layout \ud83d\udee0\ufe0f How to Add a New Module \ud83c\udf10 API \u00b6 \ud83d\udd10 Authentication \u00b6 API Status Time Finished Link to Docs /signup \u2705 Complete 2024-12-07 2:00pm View Docs \ud83d\udcd8 Account Management \u00b6 API Status Time Finished Link to Docs /account_create \u2705 Complete 2024-12-07 3:10pm View Docs /account_summary?email=<> \u2705 Complete 2024-12-07 3:40pm View Docs /delete_account?email=<>&account_name=<> \u2705 Complete 2024-12-07 4:20pm View Docs \ud83d\udce6 Category Management \u00b6 API Status Time Finished Link to Docs /category_create \u2705 Complete 2024-12-07 View Docs /category_summary?email=<> \u2705 Complete 2024-12-07 View Docs /delete_category?email=<>&category_nickname=<> \u2705 Complete 2024-12-07 View Docs /category_update?email=<>&field=<field_to_update>&category_nickname=<>&new_value=<> \u2705 Complete 2024-12-07 View Docs \ud83d\udcb8 Transaction Management \u00b6 API Status Time Finished Link to Docs /add_trans \u2705 Complete 2024-12-12 View Docs /delete_trans?<delete_query..> \u2705 Complete 2024-12-12 View Docs \ud83d\udcee Postman API Testing \u00b6 To explore and test the API endpoints, you can check out the Postman API documentation here (localhost version). \u26a1 Quick Start \u00b6 \ud83d\udd25 Clone the project \u00b6 git clone https://github.com/FinTrak-Solutions/Backend.git \ud83d\udce6 Install Virtual Environment \u00b6 cd Backend virtualenv venv source venv/bin/activate pip3 install mkdocs \ud83d\udcc1 Go to the Documentation Directory \u00b6 cd Documentation \ud83d\udcdd Modify .md files in docs/ \u00b6 # Check and update locally mkdocs serve # Modify .md files in the docs/ folder \ud83d\ude80 Build and Deploy \u00b6 # Build and deploy mkdocs build mkdocs gh-deploy \ud83d\uddc4\ufe0f Database Schema \u00b6 \ud83d\udcd8 Full details about the Database Schema can be found here . \ud83d\uddc2\ufe0f Project Layout \u00b6 Here is the visualized structure of the src directory for the backend. src \u251c\u2500\u2500 db.rs -- \ud83d\uddc4\ufe0f Handles database setup and connections \u251c\u2500\u2500 handlers -- \ud83d\udee0\ufe0f Controllers for handling business logic \u2502 \u251c\u2500\u2500 account_handler.rs -- \ud83d\udcd8 Handles account-related logic \u2502 \u251c\u2500\u2500 auth_handler.rs -- \ud83d\udd10 Handles user authentication logic \u2502 \u251c\u2500\u2500 category_handler.rs -- \ud83d\udce6 Handles category-related logic \u2502 \u2514\u2500\u2500 mod.rs -- \ud83d\udce6 Module declaration file for handlers \u251c\u2500\u2500 main.rs -- \ud83d\ude80 The main entry point for the backend application \u251c\u2500\u2500 models -- \ud83d\udce6 Data models that map to the database schema \u2502 \u251c\u2500\u2500 account.rs -- \ud83d\udcd8 Account model \u2502 \u251c\u2500\u2500 category.rs -- \ud83d\udce6 Category model \u2502 \u251c\u2500\u2500 mod.rs -- \ud83d\udce6 Module declaration file for models \u2502 \u251c\u2500\u2500 transaction.rs -- \ud83d\udcb8 Transaction model \u2502 \u2514\u2500\u2500 user.rs -- \ud83d\udd10 User model \u251c\u2500\u2500 routes -- \ud83c\udf10 Defines the routes for the API endpoints \u2502 \u251c\u2500\u2500 account.rs -- \ud83d\udcd8 Account-related API routes \u2502 \u251c\u2500\u2500 auth.rs -- \ud83d\udd10 Authentication-related API routes \u2502 \u251c\u2500\u2500 category.rs -- \ud83d\udce6 Category-related API routes \u2502 \u251c\u2500\u2500 mod.rs -- \ud83d\udce6 Module declaration file for routes \u2502 \u2514\u2500\u2500 transaction.rs -- \ud83d\udcb8 Transaction-related API routes \u2514\u2500\u2500 schema.rs -- \ud83d\udcd8 Automatically generated schema file for Diesel \ud83d\udee0\ufe0f How to Add a New Module \u00b6 Want to add a new module (like transaction or budget )? Follow these steps to ensure a consistent, clean structure. 1\ufe0f\u20e3 Create the New Module \u00b6 Create a new folder in src/handlers/ , src/models/ , and src/routes/ for your new module. touch src/handlers/new_module_handler.rs touch src/models/new_module.rs touch src/routes/new_module.rs Add the new module to the mod.rs files in each of these folders. src/handlers/mod.rs pub mod new_module_handler; src/models/mod.rs pub mod new_module; src/routes/mod.rs pub mod new_module; 2\ufe0f\u20e3 Define the Database Schema \u00b6 Add the table to the schema.rs file if it doesn't exist. Run Diesel to generate the schema for the new table: diesel migration generate create_new_module 3\ufe0f\u20e3 Add Business Logic \u00b6 Add business logic to new_module_handler.rs . Implement CRUD functions like create , read , update , delete . 4\ufe0f\u20e3 Register Routes \u00b6 Add routes for the new module in routes/new_module.rs . Use Rocket to define GET , POST , PUT , and DELETE endpoints. Example Route in src/routes/new_module.rs : use rocket::{get, post}; #[get(\"/new_module\")] pub fn get_new_module() -> &'static str { \"Get all new module items\" } #[post(\"/new_module\")] pub fn create_new_module() -> &'static str { \"Create a new module item\" } 5\ufe0f\u20e3 Update main.rs \u00b6 Add the new module's route to the main.rs file. Register the routes with Rocket . src/main.rs #[macro_use] extern crate rocket; mod routes; #[launch] fn rocket() -> _ { rocket::build() .mount(\"/\", routes![ routes::new_module::get_new_module, routes::new_module::create_new_module, ]) }","title":"Backend Documentation"},{"location":"#backend-documentation","text":"This documentation outlines the backend structure, API endpoints, project layout, and the process for updating and deploying the documentation. The backend is built with Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL for persistent storage.","title":"\ud83d\ude80 Backend Documentation"},{"location":"#table-of-contents","text":"\ud83c\udf10 API \ud83d\udd10 Authentication \ud83d\udcd8 Account Management \ud83d\udce6 Category Management \ud83d\udcb8 Transaction Management \ud83d\udcee Postman API Testing \u26a1 Quick Start \ud83d\uddc4\ufe0f Database Schema \ud83d\uddc2\ufe0f Project Layout \ud83d\udee0\ufe0f How to Add a New Module","title":"\ud83d\udcda Table of Contents"},{"location":"#api","text":"","title":"\ud83c\udf10 API"},{"location":"#authentication","text":"API Status Time Finished Link to Docs /signup \u2705 Complete 2024-12-07 2:00pm View Docs","title":"\ud83d\udd10 Authentication"},{"location":"#account-management","text":"API Status Time Finished Link to Docs /account_create \u2705 Complete 2024-12-07 3:10pm View Docs /account_summary?email=<> \u2705 Complete 2024-12-07 3:40pm View Docs /delete_account?email=<>&account_name=<> \u2705 Complete 2024-12-07 4:20pm View Docs","title":"\ud83d\udcd8 Account Management"},{"location":"#category-management","text":"API Status Time Finished Link to Docs /category_create \u2705 Complete 2024-12-07 View Docs /category_summary?email=<> \u2705 Complete 2024-12-07 View Docs /delete_category?email=<>&category_nickname=<> \u2705 Complete 2024-12-07 View Docs /category_update?email=<>&field=<field_to_update>&category_nickname=<>&new_value=<> \u2705 Complete 2024-12-07 View Docs","title":"\ud83d\udce6 Category Management"},{"location":"#transaction-management","text":"API Status Time Finished Link to Docs /add_trans \u2705 Complete 2024-12-12 View Docs /delete_trans?<delete_query..> \u2705 Complete 2024-12-12 View Docs","title":"\ud83d\udcb8 Transaction Management"},{"location":"#postman-api-testing","text":"To explore and test the API endpoints, you can check out the Postman API documentation here (localhost version).","title":"\ud83d\udcee Postman API Testing"},{"location":"#quick-start","text":"","title":"\u26a1 Quick Start"},{"location":"#clone-the-project","text":"git clone https://github.com/FinTrak-Solutions/Backend.git","title":"\ud83d\udd25 Clone the project"},{"location":"#install-virtual-environment","text":"cd Backend virtualenv venv source venv/bin/activate pip3 install mkdocs","title":"\ud83d\udce6 Install Virtual Environment"},{"location":"#go-to-the-documentation-directory","text":"cd Documentation","title":"\ud83d\udcc1 Go to the Documentation Directory"},{"location":"#modify-md-files-in-docs","text":"# Check and update locally mkdocs serve # Modify .md files in the docs/ folder","title":"\ud83d\udcdd Modify .md files in docs/"},{"location":"#build-and-deploy","text":"# Build and deploy mkdocs build mkdocs gh-deploy","title":"\ud83d\ude80 Build and Deploy"},{"location":"#database-schema","text":"\ud83d\udcd8 Full details about the Database Schema can be found here .","title":"\ud83d\uddc4\ufe0f Database Schema"},{"location":"#project-layout","text":"Here is the visualized structure of the src directory for the backend. src \u251c\u2500\u2500 db.rs -- \ud83d\uddc4\ufe0f Handles database setup and connections \u251c\u2500\u2500 handlers -- \ud83d\udee0\ufe0f Controllers for handling business logic \u2502 \u251c\u2500\u2500 account_handler.rs -- \ud83d\udcd8 Handles account-related logic \u2502 \u251c\u2500\u2500 auth_handler.rs -- \ud83d\udd10 Handles user authentication logic \u2502 \u251c\u2500\u2500 category_handler.rs -- \ud83d\udce6 Handles category-related logic \u2502 \u2514\u2500\u2500 mod.rs -- \ud83d\udce6 Module declaration file for handlers \u251c\u2500\u2500 main.rs -- \ud83d\ude80 The main entry point for the backend application \u251c\u2500\u2500 models -- \ud83d\udce6 Data models that map to the database schema \u2502 \u251c\u2500\u2500 account.rs -- \ud83d\udcd8 Account model \u2502 \u251c\u2500\u2500 category.rs -- \ud83d\udce6 Category model \u2502 \u251c\u2500\u2500 mod.rs -- \ud83d\udce6 Module declaration file for models \u2502 \u251c\u2500\u2500 transaction.rs -- \ud83d\udcb8 Transaction model \u2502 \u2514\u2500\u2500 user.rs -- \ud83d\udd10 User model \u251c\u2500\u2500 routes -- \ud83c\udf10 Defines the routes for the API endpoints \u2502 \u251c\u2500\u2500 account.rs -- \ud83d\udcd8 Account-related API routes \u2502 \u251c\u2500\u2500 auth.rs -- \ud83d\udd10 Authentication-related API routes \u2502 \u251c\u2500\u2500 category.rs -- \ud83d\udce6 Category-related API routes \u2502 \u251c\u2500\u2500 mod.rs -- \ud83d\udce6 Module declaration file for routes \u2502 \u2514\u2500\u2500 transaction.rs -- \ud83d\udcb8 Transaction-related API routes \u2514\u2500\u2500 schema.rs -- \ud83d\udcd8 Automatically generated schema file for Diesel","title":"\ud83d\uddc2\ufe0f Project Layout"},{"location":"#how-to-add-a-new-module","text":"Want to add a new module (like transaction or budget )? Follow these steps to ensure a consistent, clean structure.","title":"\ud83d\udee0\ufe0f How to Add a New Module"},{"location":"#1-create-the-new-module","text":"Create a new folder in src/handlers/ , src/models/ , and src/routes/ for your new module. touch src/handlers/new_module_handler.rs touch src/models/new_module.rs touch src/routes/new_module.rs Add the new module to the mod.rs files in each of these folders. src/handlers/mod.rs pub mod new_module_handler; src/models/mod.rs pub mod new_module; src/routes/mod.rs pub mod new_module;","title":"1\ufe0f\u20e3 Create the New Module"},{"location":"#2-define-the-database-schema","text":"Add the table to the schema.rs file if it doesn't exist. Run Diesel to generate the schema for the new table: diesel migration generate create_new_module","title":"2\ufe0f\u20e3 Define the Database Schema"},{"location":"#3-add-business-logic","text":"Add business logic to new_module_handler.rs . Implement CRUD functions like create , read , update , delete .","title":"3\ufe0f\u20e3 Add Business Logic"},{"location":"#4-register-routes","text":"Add routes for the new module in routes/new_module.rs . Use Rocket to define GET , POST , PUT , and DELETE endpoints. Example Route in src/routes/new_module.rs : use rocket::{get, post}; #[get(\"/new_module\")] pub fn get_new_module() -> &'static str { \"Get all new module items\" } #[post(\"/new_module\")] pub fn create_new_module() -> &'static str { \"Create a new module item\" }","title":"4\ufe0f\u20e3 Register Routes"},{"location":"#5-update-mainrs","text":"Add the new module's route to the main.rs file. Register the routes with Rocket . src/main.rs #[macro_use] extern crate rocket; mod routes; #[launch] fn rocket() -> _ { rocket::build() .mount(\"/\", routes![ routes::new_module::get_new_module, routes::new_module::create_new_module, ]) }","title":"5\ufe0f\u20e3 Update main.rs"},{"location":"account/","text":"Account Management \u00b6 Create New Account for User POST \u00b6 API \u00b6 /account_create Request: \u00b6 { \"email\": \"test@example.com\", \"type\": \"credit\", \"account_name\": \"td_credit\" } Response: \u00b6 Successfully created: STATUS_CODE : CREATED (201) Message : \"Successfully created account_name \" Failed to create: No email found in user table STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" account_name already exists for current user STATUS_CODE : BAD_REQUEST (400) Message : \"Failed to create new account\" Get Account Overview for User GET \u00b6 API \u00b6 /account_summary?email=wick@example.com Response: \u00b6 Email found STATUS_CODE : OK (200) [ { \"account_id\": 1, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"td_credit\" }, { \"account_id\": 2, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"bmo_credit\" } ] Email Not found STATUS_CODE : OK (200) return empty list in body [] Delete an account for User DELETE \u00b6 API \u00b6 /delete_account?email=<>&account_name=<> Response: \u00b6 Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No such account found for the provided email\" Account found: STATUS_CODE : OK (200) Message : \"Account successfully deleted\" Get Account Detailed View for User GET \u00b6 API \u00b6 NOTE: This interface will be handled by transaction details section.","title":"Account Management"},{"location":"account/#account-management","text":"","title":"Account Management"},{"location":"account/#create-new-account-for-user-post","text":"","title":"Create New Account for User POST"},{"location":"account/#api","text":"/account_create","title":"API"},{"location":"account/#request","text":"{ \"email\": \"test@example.com\", \"type\": \"credit\", \"account_name\": \"td_credit\" }","title":"Request:"},{"location":"account/#response","text":"Successfully created: STATUS_CODE : CREATED (201) Message : \"Successfully created account_name \" Failed to create: No email found in user table STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" account_name already exists for current user STATUS_CODE : BAD_REQUEST (400) Message : \"Failed to create new account\"","title":"Response:"},{"location":"account/#get-account-overview-for-user-get","text":"","title":"Get Account Overview for User GET"},{"location":"account/#api_1","text":"/account_summary?email=wick@example.com","title":"API"},{"location":"account/#response_1","text":"Email found STATUS_CODE : OK (200) [ { \"account_id\": 1, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"td_credit\" }, { \"account_id\": 2, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"bmo_credit\" } ] Email Not found STATUS_CODE : OK (200) return empty list in body []","title":"Response:"},{"location":"account/#delete-an-account-for-user-delete","text":"","title":"Delete an account for User DELETE"},{"location":"account/#api_2","text":"/delete_account?email=<>&account_name=<>","title":"API"},{"location":"account/#response_2","text":"Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No such account found for the provided email\" Account found: STATUS_CODE : OK (200) Message : \"Account successfully deleted\"","title":"Response:"},{"location":"account/#get-account-detailed-view-for-user-get","text":"","title":"Get Account Detailed View for User GET"},{"location":"account/#api_3","text":"NOTE: This interface will be handled by transaction details section.","title":"API"},{"location":"authentication/","text":"Authentication \u00b6 Signup POST \u00b6 API \u00b6 /signup Post Body ( Json ) \u00b6 Request: \u00b6 { \"username\": \"John Wick\", \"email\": \"test@example.com\", \"password\": \"123456\" } Response: (String with Status Code) \u00b6 If email exists: password good: STATUS_CODE : OK (200) Message : \" username Login successful\" password bad: STATUS_CODE : BAD_REQUEST (400) Message : \"Invalid password\" If email does not exist: STATUS_CODE : CREATED (201) Message : \"User successfully registered\"","title":"Authentication"},{"location":"authentication/#authentication","text":"","title":"Authentication"},{"location":"authentication/#signup-post","text":"","title":"Signup POST"},{"location":"authentication/#api","text":"/signup","title":"API"},{"location":"authentication/#post-body-json","text":"","title":"Post Body (Json)"},{"location":"authentication/#request","text":"{ \"username\": \"John Wick\", \"email\": \"test@example.com\", \"password\": \"123456\" }","title":"Request:"},{"location":"authentication/#response-string-with-status-code","text":"If email exists: password good: STATUS_CODE : OK (200) Message : \" username Login successful\" password bad: STATUS_CODE : BAD_REQUEST (400) Message : \"Invalid password\" If email does not exist: STATUS_CODE : CREATED (201) Message : \"User successfully registered\"","title":"Response: (String with Status Code)"},{"location":"category/","text":"Category Management \u00b6 Create New Category POST \u00b6 API \u00b6 /category_create Request \u00b6 { \"email\": \"wick@example.com\", \"nickname\": \"TBD\", \"category_type\": \"weapon\", \"budget\": 12345.678, \"budget_freq\": \"daily\" } Response: \u00b6 Successfully created: STATUS_CODE : CREATED (201) Message : \"Successfully created category_nickname \" Failed to create: No email found in user table STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" category_nickname already exists for current user STATUS_CODE : BAD_REQUEST (400) Message : Failed to create new category: duplicate nicknames Get Category Overview for User GET \u00b6 API \u00b6 /category_summary?email=wick@example.com Response: \u00b6 Email found: STATUS_CODE : OK (200) [ { \"email\": \"wick@example.com\", \"nickname\": \"TBD\", \"category_type\": \"weapon\", \"budget\": 12345.678, \"budget_freq\": \"daily\" }, { \"email\": \"wick@example.com\", \"nickname\": \"food\", \"category_type\": \"expense\", \"budget\": 100.00, \"budget_freq\": \"daily\" } ] Email Not found STATUS_CODE : OK (200) return empty list in body [] Delete a category for User DELETE \u00b6 API \u00b6 /delete_category?email=<user_email_addr>&category_nickname=<nickname> Response: \u00b6 Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No such category found for the provided email\" Account not found: STATUS_CODE : OK (200) Message : \"Category successfully deleted\" Update a category for User UPDATE \u00b6 API \u00b6 /category_update?email=<user_email>&field=<field_to_update>&category_nickname=<nickname>&new_value=<new_value> note: the category_nickname is the OLD name of the category. Response: \u00b6 Email not found: STATUS_CODE : BAD REQUEST (400) Message: \"No user found for the provided email\" No match to update: STATUS_CODE : BAD REQUEST (400) Message: \"Failed to update category: unable to match existing entry\" Invalid field specified: STATUS_CODE : BAD REQUEST (400) Message: \"Invalid field specified.\" Successfully updated: STATUS_CODE : OK (200)","title":"Category Management"},{"location":"category/#category-management","text":"","title":"Category Management"},{"location":"category/#create-new-category-post","text":"","title":"Create New Category POST"},{"location":"category/#api","text":"/category_create","title":"API"},{"location":"category/#request","text":"{ \"email\": \"wick@example.com\", \"nickname\": \"TBD\", \"category_type\": \"weapon\", \"budget\": 12345.678, \"budget_freq\": \"daily\" }","title":"Request"},{"location":"category/#response","text":"Successfully created: STATUS_CODE : CREATED (201) Message : \"Successfully created category_nickname \" Failed to create: No email found in user table STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" category_nickname already exists for current user STATUS_CODE : BAD_REQUEST (400) Message : Failed to create new category: duplicate nicknames","title":"Response:"},{"location":"category/#get-category-overview-for-user-get","text":"","title":"Get Category Overview for User GET"},{"location":"category/#api_1","text":"/category_summary?email=wick@example.com","title":"API"},{"location":"category/#response_1","text":"Email found: STATUS_CODE : OK (200) [ { \"email\": \"wick@example.com\", \"nickname\": \"TBD\", \"category_type\": \"weapon\", \"budget\": 12345.678, \"budget_freq\": \"daily\" }, { \"email\": \"wick@example.com\", \"nickname\": \"food\", \"category_type\": \"expense\", \"budget\": 100.00, \"budget_freq\": \"daily\" } ] Email Not found STATUS_CODE : OK (200) return empty list in body []","title":"Response:"},{"location":"category/#delete-a-category-for-user-delete","text":"","title":"Delete a category for User DELETE"},{"location":"category/#api_2","text":"/delete_category?email=<user_email_addr>&category_nickname=<nickname>","title":"API"},{"location":"category/#response_2","text":"Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No such category found for the provided email\" Account not found: STATUS_CODE : OK (200) Message : \"Category successfully deleted\"","title":"Response:"},{"location":"category/#update-a-category-for-user-update","text":"","title":"Update a category for User UPDATE"},{"location":"category/#api_3","text":"/category_update?email=<user_email>&field=<field_to_update>&category_nickname=<nickname>&new_value=<new_value> note: the category_nickname is the OLD name of the category.","title":"API"},{"location":"category/#response_3","text":"Email not found: STATUS_CODE : BAD REQUEST (400) Message: \"No user found for the provided email\" No match to update: STATUS_CODE : BAD REQUEST (400) Message: \"Failed to update category: unable to match existing entry\" Invalid field specified: STATUS_CODE : BAD REQUEST (400) Message: \"Invalid field specified.\" Successfully updated: STATUS_CODE : OK (200)","title":"Response:"},{"location":"database/","text":"Database Schema Documentation \u00b6 Introduction \u00b6 This document outlines the updated database schema for the financial tracker application backend, utilizing Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL as the database. The schema is designed to efficiently store and manage user information , financial accounts , transactions , budgets , and categories , ensuring data scalability and consistency. Table of Contents \u00b6 User Table Account Table Transaction Table Category Table Summary of Updates User Table \u00b6 Description \u00b6 Stores user credentials and personal information. Each user is uniquely identified and can have multiple accounts, transactions, and categories associated with them. Schema \u00b6 Field Name Data Type Constraints Description id SERIAL Primary Key Unique identifier for each user. email TEXT Unique, Not Null User's email address. password TEXT Not Null Hashed password for security. username TEXT Not Null User's unique username. Account Table \u00b6 Description \u00b6 Represents financial accounts linked to users. Each account belongs to a user and holds financial transactions. Schema \u00b6 Field Name Data Type Constraints Description account_id SERIAL Primary Key Unique identifier for each account. email TEXT Foreign Key ( User.email ), Not Null Email of the account owner. account_type TEXT Not Null Type of the account (e.g., Credit , Debit , Savings ). account_name TEXT Not Null A descriptive name for the account. Transaction Table \u00b6 Description \u00b6 Logs all financial transactions associated with accounts. Each transaction records details like amount, timestamp, and category. Schema \u00b6 Field Name Data Type Constraints Description trans_id SERIAL Primary Key Unique identifier for each transaction. email TEXT Foreign Key ( User.email ), Not Null Email of the user linked to the transaction. category_id INTEGER Foreign Key ( Category.category_id ) Category classification for the transaction. amount FLOAT8 Not Null Transaction amount (positive or negative). notes TEXT (nullable) Optional Additional notes for the transaction. Category Table \u00b6 Description \u00b6 Provides a way to classify transactions into categories, allowing for detailed financial tracking and reporting. Schema \u00b6 Field Name Data Type Constraints Description category_id SERIAL Primary Key Unique identifier for each category. email TEXT Foreign Key ( User.email ), Not Null Email of the user who owns the category. nickname TEXT Not Null A descriptive name for the category. category_type TEXT Not Null Type of category (e.g., Food , Bills ). budget FLOAT8 Optional Budget associated with this category. budget_freq TEXT Optional Budget frequency ( Daily , Weekly , etc.). Summary of Updates \u00b6 Primary Keys : Added id fields as primary keys in tables where they were missing. Foreign Key Relationships : email links multiple tables to the users table for referential integrity. category_id links the transactions table to the categories table. Field Updates : Added account_name to the accounts table for better account identification. Ensured foreign key constraints for better data consistency. Enumerations and Constraints : Categories and budgets allow classification for better financial tracking. Transaction amounts support both positive and negative values. Scalability and Performance : Schema supports detailed tracking and reporting, optimized for scalability and extensibility.","title":"Database Schema"},{"location":"database/#database-schema-documentation","text":"","title":"Database Schema Documentation"},{"location":"database/#introduction","text":"This document outlines the updated database schema for the financial tracker application backend, utilizing Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL as the database. The schema is designed to efficiently store and manage user information , financial accounts , transactions , budgets , and categories , ensuring data scalability and consistency.","title":"Introduction"},{"location":"database/#table-of-contents","text":"User Table Account Table Transaction Table Category Table Summary of Updates","title":"Table of Contents"},{"location":"database/#user-table","text":"","title":"User Table"},{"location":"database/#description","text":"Stores user credentials and personal information. Each user is uniquely identified and can have multiple accounts, transactions, and categories associated with them.","title":"Description"},{"location":"database/#schema","text":"Field Name Data Type Constraints Description id SERIAL Primary Key Unique identifier for each user. email TEXT Unique, Not Null User's email address. password TEXT Not Null Hashed password for security. username TEXT Not Null User's unique username.","title":"Schema"},{"location":"database/#account-table","text":"","title":"Account Table"},{"location":"database/#description_1","text":"Represents financial accounts linked to users. Each account belongs to a user and holds financial transactions.","title":"Description"},{"location":"database/#schema_1","text":"Field Name Data Type Constraints Description account_id SERIAL Primary Key Unique identifier for each account. email TEXT Foreign Key ( User.email ), Not Null Email of the account owner. account_type TEXT Not Null Type of the account (e.g., Credit , Debit , Savings ). account_name TEXT Not Null A descriptive name for the account.","title":"Schema"},{"location":"database/#transaction-table","text":"","title":"Transaction Table"},{"location":"database/#description_2","text":"Logs all financial transactions associated with accounts. Each transaction records details like amount, timestamp, and category.","title":"Description"},{"location":"database/#schema_2","text":"Field Name Data Type Constraints Description trans_id SERIAL Primary Key Unique identifier for each transaction. email TEXT Foreign Key ( User.email ), Not Null Email of the user linked to the transaction. category_id INTEGER Foreign Key ( Category.category_id ) Category classification for the transaction. amount FLOAT8 Not Null Transaction amount (positive or negative). notes TEXT (nullable) Optional Additional notes for the transaction.","title":"Schema"},{"location":"database/#category-table","text":"","title":"Category Table"},{"location":"database/#description_3","text":"Provides a way to classify transactions into categories, allowing for detailed financial tracking and reporting.","title":"Description"},{"location":"database/#schema_3","text":"Field Name Data Type Constraints Description category_id SERIAL Primary Key Unique identifier for each category. email TEXT Foreign Key ( User.email ), Not Null Email of the user who owns the category. nickname TEXT Not Null A descriptive name for the category. category_type TEXT Not Null Type of category (e.g., Food , Bills ). budget FLOAT8 Optional Budget associated with this category. budget_freq TEXT Optional Budget frequency ( Daily , Weekly , etc.).","title":"Schema"},{"location":"database/#summary-of-updates","text":"Primary Keys : Added id fields as primary keys in tables where they were missing. Foreign Key Relationships : email links multiple tables to the users table for referential integrity. category_id links the transactions table to the categories table. Field Updates : Added account_name to the accounts table for better account identification. Ensured foreign key constraints for better data consistency. Enumerations and Constraints : Categories and budgets allow classification for better financial tracking. Transaction amounts support both positive and negative values. Scalability and Performance : Schema supports detailed tracking and reporting, optimized for scalability and extensibility.","title":"Summary of Updates"},{"location":"frontend/","text":"______ __ __ __ ______ ______ ______ ______ __ __ /\\ ___\\/\\ \\/\\ \"-.\\ \\/\\__ _\\/\\ == \\/\\ __ \\/\\ ___\\/\\ \\/ / \\ \\ __\\\\ \\ \\ \\ \\-. \\/_/\\ \\/\\ \\ __<\\ \\ __ \\ \\ \\___\\ \\ _\"-. \\ \\_\\ \\ \\_\\ \\_\\\\\"\\_\\ \\ \\_\\ \\ \\_\\ \\_\\ \\_\\ \\_\\ \\_____\\ \\_\\ \\_\\ \\/_/ \\/_/\\/_/ \\/_/ \\/_/ \\/_/ /_/\\/_/\\/_/\\/_____/\\/_/\\/_/ \ud83d\udcd8 TUI Frontend Documentation \u00b6 \ud83d\uddc2\ufe0f Project Structure \u00b6 Here is the tree view of the TUI frontend project . This structure is designed to keep files organized and make it easy to add new pages, components, and utilities. TUI/ \u251c\u2500\u2500 Cargo.toml # Rust package manifest file \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 main.rs # Entry point for the application \u2502 \u251c\u2500\u2500 ui/ \u2502 \u2502 \u251c\u2500\u2500 components.rs # Reusable input field components \u2502 \u2502 \u251c\u2500\u2500 cover.rs # Cover page (first page of the TUI) \u2502 \u2502 \u251c\u2500\u2500 login.rs # Login page \u2502 \u2502 \u251c\u2500\u2500 signup.rs # Signup page \u2502 \u2502 \u2514\u2500\u2500 mod.rs # Exposes all UI pages for easy imports \u2502 \u2514\u2500\u2500 utils/ # Utility functions, helpers, or extensions (optional) \u2502 \u251c\u2500\u2500 assets/ # Place for ASCII art or static text files (optional) \u251c\u2500\u2500 README.md # Instructions for the project \u2514\u2500\u2500 .gitignore # Ignore build files, node_modules, etc. \ud83d\uddc2\ufe0f Work Distribution \u00b6 Page Assign to Done or Not Cover Damian \u2705 Signup Damian Login Damian Home Damian Account Ellen Account Detail Ellen Create Account Ellen Category TBD Category Detail TBD Create Category TBD Create Transaction Damian Report Sarah \ud83c\udfa8 Page Design \u00b6 \ud83d\udcda Explanation of Key Files \u00b6 File/Folder Purpose main.rs Entry point of the TUI app, sets up the terminal, and handles page routing. ui/cover.rs First page displayed when the app runs. Shows the logo and page options (Signup, Login, Quit). ui/signup.rs Handles the signup page where users enter their username, email, password, and confirm password . ui/login.rs Handles the login page where users enter email and password to log in. ui/components.rs Defines reusable components like InputField for forms (input fields) used on Signup and Login pages. ui/mod.rs Exports all UI pages (cover, login, signup) so they can be easily imported from mod.rs . utils/ Utility functions (not required for now but useful if logic grows). assets/ Store static files like ASCII logos or help text (optional, can be used for large logos). \ud83c\udf10 Page Workflow \u00b6 Here\u2019s how the flow of pages works in this project. [ Cover Page (start) ] \u2193 [ 1. Signup Page ] <--- Select using keyboard \u2193 [ 2. Login Page ] <--- Select using keyboard Cover Page : The first page displayed when you launch the app. You can select 1 to go to the Signup Page . You can select 2 to go to the Login Page . Press Esc to quit. Signup Page : User fills in Username, Email, Password, and Confirm Password . Press Tab to navigate between input fields. Press Enter to submit the form. If passwords don't match, an error message appears. Login Page : User fills in Email and Password . Press Tab to navigate between input fields. Press Enter to submit the form. If email/password is incorrect, an error message appears. \ud83d\udd27 How to Add a New Page \u00b6 To add a new page, follow this step-by-step workflow . Let\u2019s assume you want to add a Settings Page . Create the Page File : Go to src/ui/ . Create a new file named settings.rs . Add Your Page Logic : use ratatui::{ layout::{Constraint, Direction, Layout}, widgets::{Block, Borders, Paragraph}, style::{Color, Style}, Frame, }; pub struct SettingsPage; impl SettingsPage { pub fn new() -> Self { Self } pub fn render(&self, f: &mut Frame) { let chunks = Layout::default() .direction(Direction::Vertical) .margin(2) .constraints([Constraint::Percentage(100)].as_ref()) .split(f.area()); let title = Paragraph::new(\"Settings Page\") .style(Style::default().fg(Color::Yellow)) .block(Block::default().borders(Borders::ALL)); f.render_widget(title, chunks[0]); } } Expose the Page in mod.rs : Go to src/ui/mod.rs . Add the following line: pub mod settings; Add the Page Route in main.rs : Open src/main.rs . Import the new page: use crate::ui::settings::SettingsPage; - Add a key (like `3`) to **open the Settings Page** from the cover page: match key { KeyCode::Char('1') => current_page = Page::Signup, KeyCode::Char('2') => current_page = Page::Login, KeyCode::Char('3') => current_page = Page::Settings, // New Route for Settings Page KeyCode::Esc => break, _ => {} } \ud83d\udce6 Example mod.rs File (for src/ui/mod.rs) \u00b6 This file exposes all UI pages . pub mod components; pub mod cover; pub mod signup; pub mod login; pub mod settings; // Newly added settings page \ud83d\ude80 How to Run the App \u00b6 Clone the Repo : git clone https://github.com/username/tui-frontend.git cd tui-frontend Run the App : cargo run Navigate : 1 to go to the Signup Page. 2 to go to the Login Page. Esc to quit. \ud83d\udcdc Page Descriptions \u00b6 Page Description Cover Page Main menu, shows logo and options for Signup and Login. Signup Page User fills in username, email, password and confirms it. Login Page User enters email and password to log in. Settings Page (Optional) Add options like theme selection . \ud83c\udf89 Contribution Workflow \u00b6 Fork the repo on GitHub. Create a branch for your new feature. git checkout -b feature/new-page Add a new page in src/ui/ following the workflow above. Run tests before submitting: cargo check cargo test Push your branch : git push origin feature/new-page Create a pull request (PR) on GitHub. \ud83d\udca1 Useful Commands \u00b6 Command Description cargo run Run the TUI application. cargo check Check for compile-time errors. cargo test Run unit tests (if any).","title":"TUI Frontend Documentation"},{"location":"frontend/#tui-frontend-documentation","text":"","title":"\ud83d\udcd8 TUI Frontend Documentation"},{"location":"frontend/#project-structure","text":"Here is the tree view of the TUI frontend project . This structure is designed to keep files organized and make it easy to add new pages, components, and utilities. TUI/ \u251c\u2500\u2500 Cargo.toml # Rust package manifest file \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 main.rs # Entry point for the application \u2502 \u251c\u2500\u2500 ui/ \u2502 \u2502 \u251c\u2500\u2500 components.rs # Reusable input field components \u2502 \u2502 \u251c\u2500\u2500 cover.rs # Cover page (first page of the TUI) \u2502 \u2502 \u251c\u2500\u2500 login.rs # Login page \u2502 \u2502 \u251c\u2500\u2500 signup.rs # Signup page \u2502 \u2502 \u2514\u2500\u2500 mod.rs # Exposes all UI pages for easy imports \u2502 \u2514\u2500\u2500 utils/ # Utility functions, helpers, or extensions (optional) \u2502 \u251c\u2500\u2500 assets/ # Place for ASCII art or static text files (optional) \u251c\u2500\u2500 README.md # Instructions for the project \u2514\u2500\u2500 .gitignore # Ignore build files, node_modules, etc.","title":"\ud83d\uddc2\ufe0f Project Structure"},{"location":"frontend/#work-distribution","text":"Page Assign to Done or Not Cover Damian \u2705 Signup Damian Login Damian Home Damian Account Ellen Account Detail Ellen Create Account Ellen Category TBD Category Detail TBD Create Category TBD Create Transaction Damian Report Sarah","title":"\ud83d\uddc2\ufe0f Work Distribution"},{"location":"frontend/#page-design","text":"","title":"\ud83c\udfa8 Page Design"},{"location":"frontend/#explanation-of-key-files","text":"File/Folder Purpose main.rs Entry point of the TUI app, sets up the terminal, and handles page routing. ui/cover.rs First page displayed when the app runs. Shows the logo and page options (Signup, Login, Quit). ui/signup.rs Handles the signup page where users enter their username, email, password, and confirm password . ui/login.rs Handles the login page where users enter email and password to log in. ui/components.rs Defines reusable components like InputField for forms (input fields) used on Signup and Login pages. ui/mod.rs Exports all UI pages (cover, login, signup) so they can be easily imported from mod.rs . utils/ Utility functions (not required for now but useful if logic grows). assets/ Store static files like ASCII logos or help text (optional, can be used for large logos).","title":"\ud83d\udcda Explanation of Key Files"},{"location":"frontend/#page-workflow","text":"Here\u2019s how the flow of pages works in this project. [ Cover Page (start) ] \u2193 [ 1. Signup Page ] <--- Select using keyboard \u2193 [ 2. Login Page ] <--- Select using keyboard Cover Page : The first page displayed when you launch the app. You can select 1 to go to the Signup Page . You can select 2 to go to the Login Page . Press Esc to quit. Signup Page : User fills in Username, Email, Password, and Confirm Password . Press Tab to navigate between input fields. Press Enter to submit the form. If passwords don't match, an error message appears. Login Page : User fills in Email and Password . Press Tab to navigate between input fields. Press Enter to submit the form. If email/password is incorrect, an error message appears.","title":"\ud83c\udf10 Page Workflow"},{"location":"frontend/#how-to-add-a-new-page","text":"To add a new page, follow this step-by-step workflow . Let\u2019s assume you want to add a Settings Page . Create the Page File : Go to src/ui/ . Create a new file named settings.rs . Add Your Page Logic : use ratatui::{ layout::{Constraint, Direction, Layout}, widgets::{Block, Borders, Paragraph}, style::{Color, Style}, Frame, }; pub struct SettingsPage; impl SettingsPage { pub fn new() -> Self { Self } pub fn render(&self, f: &mut Frame) { let chunks = Layout::default() .direction(Direction::Vertical) .margin(2) .constraints([Constraint::Percentage(100)].as_ref()) .split(f.area()); let title = Paragraph::new(\"Settings Page\") .style(Style::default().fg(Color::Yellow)) .block(Block::default().borders(Borders::ALL)); f.render_widget(title, chunks[0]); } } Expose the Page in mod.rs : Go to src/ui/mod.rs . Add the following line: pub mod settings; Add the Page Route in main.rs : Open src/main.rs . Import the new page: use crate::ui::settings::SettingsPage; - Add a key (like `3`) to **open the Settings Page** from the cover page: match key { KeyCode::Char('1') => current_page = Page::Signup, KeyCode::Char('2') => current_page = Page::Login, KeyCode::Char('3') => current_page = Page::Settings, // New Route for Settings Page KeyCode::Esc => break, _ => {} }","title":"\ud83d\udd27 How to Add a New Page"},{"location":"frontend/#example-modrs-file-for-srcuimodrs","text":"This file exposes all UI pages . pub mod components; pub mod cover; pub mod signup; pub mod login; pub mod settings; // Newly added settings page","title":"\ud83d\udce6 Example mod.rs File (for src/ui/mod.rs)"},{"location":"frontend/#how-to-run-the-app","text":"Clone the Repo : git clone https://github.com/username/tui-frontend.git cd tui-frontend Run the App : cargo run Navigate : 1 to go to the Signup Page. 2 to go to the Login Page. Esc to quit.","title":"\ud83d\ude80 How to Run the App"},{"location":"frontend/#page-descriptions","text":"Page Description Cover Page Main menu, shows logo and options for Signup and Login. Signup Page User fills in username, email, password and confirms it. Login Page User enters email and password to log in. Settings Page (Optional) Add options like theme selection .","title":"\ud83d\udcdc Page Descriptions"},{"location":"frontend/#contribution-workflow","text":"Fork the repo on GitHub. Create a branch for your new feature. git checkout -b feature/new-page Add a new page in src/ui/ following the workflow above. Run tests before submitting: cargo check cargo test Push your branch : git push origin feature/new-page Create a pull request (PR) on GitHub.","title":"\ud83c\udf89 Contribution Workflow"},{"location":"frontend/#useful-commands","text":"Command Description cargo run Run the TUI application. cargo check Check for compile-time errors. cargo test Run unit tests (if any).","title":"\ud83d\udca1 Useful Commands"},{"location":"report/","text":"Report and Analysis \u00b6 Report Overview GET \u00b6 API \u00b6 /report_overview?email=<> Response: \u00b6 Email not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<String>> : Empty Successfully extracted: STATUS_CODE : OK (200) Json<Vec<String>> : Json<[\"Account Summary:\", \"td_debit: -$3200\", \"Category Summary: \", \"food: -$200\", \"clothes: -$300\"]> Report Details GET \u00b6 API \u00b6 /report_details?email=<> Response: \u00b6 Email not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<CategorySummary>> : Empty Successfully extraced: STATUS_CODE : OK (200) Json<Vec<CategorySummary>> : Each CategorySummary is in the following format: pub struct CategorySummary { pub nickname: String, pub budget: f64, pub budget_freq: String, pub overbudget: bool, pub amount: f64, pub cat_trans: Vec<String>, } An example response is provided below: [ { \"nickname\": \"food\", \"budget\": 100.0, \"budget_freq\": \"weekly\", \"overbudget\": true, \"total\": 3739.119999999999, \"cat_trans\": [ \"2024-12-08 05:07:18.906680 UTC, 456.78, winterlicious\", \"2024-12-08 05:31:26.645759 UTC, 100, EMT\", \"2024-12-08 05:31:29.750300 UTC, 100, EMT\", \"2024-12-08 05:31:33.449547 UTC, 100, EMT\", \"2024-12-08 05:31:34.869775 UTC, 100, EMT\", \"2024-12-08 05:32:39.826673 UTC, 200, EMT\", \"2024-12-08 05:56:55.727 UTC, 200, EMT\", \"2024-12-08 05:56:57.048726 UTC, 200, EMT\", \"2024-12-08 05:56:57.971029 UTC, 200, EMT\", \"2024-12-11 20:49:07.598004 UTC, 4, grocery\", \"2024-12-11 20:55:42.214059 UTC, 354, grocery\", \"2024-12-11 20:55:43.662435 UTC, 354, grocery\", \"2024-12-13 03:28:03.679604 UTC, 456.78, winterlicious\", \"2024-12-13 03:28:05.358450 UTC, 456.78, winterlicious\", \"2024-12-13 03:28:06.424495 UTC, 456.78, winterlicious\" ] }, { \"nickname\": \"clothes\", \"budget\": 12345.678, \"budget_freq\": \"monthly\", \"overbudget\": false, \"total\": 1370.34, \"cat_trans\": [ \"2024-12-11 20:39:56.714375 UTC, 456.78, Uniqlo\", \"2024-12-11 20:39:58.473895 UTC, 456.78, Uniqlo\", \"2024-12-11 20:40:00.615091 UTC, 456.78, Uniqlo\" ] } ]","title":"Report and Analysis"},{"location":"report/#report-and-analysis","text":"","title":"Report and Analysis"},{"location":"report/#report-overview-get","text":"","title":"Report Overview GET"},{"location":"report/#api","text":"/report_overview?email=<>","title":"API"},{"location":"report/#response","text":"Email not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<String>> : Empty Successfully extracted: STATUS_CODE : OK (200) Json<Vec<String>> : Json<[\"Account Summary:\", \"td_debit: -$3200\", \"Category Summary: \", \"food: -$200\", \"clothes: -$300\"]>","title":"Response:"},{"location":"report/#report-details-get","text":"","title":"Report Details GET"},{"location":"report/#api_1","text":"/report_details?email=<>","title":"API"},{"location":"report/#response_1","text":"Email not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<CategorySummary>> : Empty Successfully extraced: STATUS_CODE : OK (200) Json<Vec<CategorySummary>> : Each CategorySummary is in the following format: pub struct CategorySummary { pub nickname: String, pub budget: f64, pub budget_freq: String, pub overbudget: bool, pub amount: f64, pub cat_trans: Vec<String>, } An example response is provided below: [ { \"nickname\": \"food\", \"budget\": 100.0, \"budget_freq\": \"weekly\", \"overbudget\": true, \"total\": 3739.119999999999, \"cat_trans\": [ \"2024-12-08 05:07:18.906680 UTC, 456.78, winterlicious\", \"2024-12-08 05:31:26.645759 UTC, 100, EMT\", \"2024-12-08 05:31:29.750300 UTC, 100, EMT\", \"2024-12-08 05:31:33.449547 UTC, 100, EMT\", \"2024-12-08 05:31:34.869775 UTC, 100, EMT\", \"2024-12-08 05:32:39.826673 UTC, 200, EMT\", \"2024-12-08 05:56:55.727 UTC, 200, EMT\", \"2024-12-08 05:56:57.048726 UTC, 200, EMT\", \"2024-12-08 05:56:57.971029 UTC, 200, EMT\", \"2024-12-11 20:49:07.598004 UTC, 4, grocery\", \"2024-12-11 20:55:42.214059 UTC, 354, grocery\", \"2024-12-11 20:55:43.662435 UTC, 354, grocery\", \"2024-12-13 03:28:03.679604 UTC, 456.78, winterlicious\", \"2024-12-13 03:28:05.358450 UTC, 456.78, winterlicious\", \"2024-12-13 03:28:06.424495 UTC, 456.78, winterlicious\" ] }, { \"nickname\": \"clothes\", \"budget\": 12345.678, \"budget_freq\": \"monthly\", \"overbudget\": false, \"total\": 1370.34, \"cat_trans\": [ \"2024-12-11 20:39:56.714375 UTC, 456.78, Uniqlo\", \"2024-12-11 20:39:58.473895 UTC, 456.78, Uniqlo\", \"2024-12-11 20:40:00.615091 UTC, 456.78, Uniqlo\" ] } ]","title":"Response:"},{"location":"transaction/","text":"Transaction Management \u00b6 Create New Transaction POST \u00b6 API \u00b6 /add_trans Request \u00b6 { \"email\": \"wick@example.com\", \"category_name\": \"food\", \"amount\": 456.78, \"notes\": \"winterlicious\", \"account_name\": \"td_debit\" } Response: \u00b6 Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No category found for the provided email\" Category not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No account found for the provided email\" Successfully added: STATUS_CODE : CREATED (200) Message : new transaction ID as string. Delete Transaction DELETE \u00b6 API \u00b6 /delete_trans?trans_id=<> Response: \u00b6 ID not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No transaction found for the provided ID\" Transaction successfully deleted: STATUS_CODE : OK (200) Message : \"No transaction found for the provided ID\" Otherwise: STATUS_CODE : INTERNAL_SERVER_ERROR (500) Message : \"Failed to delete the transaction\" Get Category Transactions GET \u00b6 API \u00b6 /category_trans?category_name=<>&email=<> Response: \u00b6 email or category name not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<Transaction>> : Empty transactions successfully extracted: STATUS_CODE : OK (200) Json<Vec<Transaction>> Get Account Transactions GET \u00b6 API \u00b6 /account_trans?account_name=<>&email=<> Response: \u00b6 account name or email not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<Transaction>> : Empty transactions successfully extracted: STATUS_CODE : OK (200) Json<Vec<Transaction>>","title":"Transaction Management"},{"location":"transaction/#transaction-management","text":"","title":"Transaction Management"},{"location":"transaction/#create-new-transaction-post","text":"","title":"Create New Transaction POST"},{"location":"transaction/#api","text":"/add_trans","title":"API"},{"location":"transaction/#request","text":"{ \"email\": \"wick@example.com\", \"category_name\": \"food\", \"amount\": 456.78, \"notes\": \"winterlicious\", \"account_name\": \"td_debit\" }","title":"Request"},{"location":"transaction/#response","text":"Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No category found for the provided email\" Category not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No account found for the provided email\" Successfully added: STATUS_CODE : CREATED (200) Message : new transaction ID as string.","title":"Response:"},{"location":"transaction/#delete-transaction-delete","text":"","title":"Delete Transaction DELETE"},{"location":"transaction/#api_1","text":"/delete_trans?trans_id=<>","title":"API"},{"location":"transaction/#response_1","text":"ID not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No transaction found for the provided ID\" Transaction successfully deleted: STATUS_CODE : OK (200) Message : \"No transaction found for the provided ID\" Otherwise: STATUS_CODE : INTERNAL_SERVER_ERROR (500) Message : \"Failed to delete the transaction\"","title":"Response:"},{"location":"transaction/#get-category-transactions-get","text":"","title":"Get Category Transactions GET"},{"location":"transaction/#api_2","text":"/category_trans?category_name=<>&email=<>","title":"API"},{"location":"transaction/#response_2","text":"email or category name not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<Transaction>> : Empty transactions successfully extracted: STATUS_CODE : OK (200) Json<Vec<Transaction>>","title":"Response:"},{"location":"transaction/#get-account-transactions-get","text":"","title":"Get Account Transactions GET"},{"location":"transaction/#api_3","text":"/account_trans?account_name=<>&email=<>","title":"API"},{"location":"transaction/#response_3","text":"account name or email not found: STATUS_CODE : BAD_REQUEST (400) Json<Vec<Transaction>> : Empty transactions successfully extracted: STATUS_CODE : OK (200) Json<Vec<Transaction>>","title":"Response:"}]}